// /src/lib/db/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tournament {
  id          String   @id @default(cuid())
  name        String
  teamCount   Int
  location    String?
  startDate   DateTime
  endDate     DateTime
  lastRegDate DateTime

  teams   Team[]
  matches Match[]

  createdAt DateTime @default(now())
}

model Team {
  id           String     @id @default(cuid())
  teamNumber   Int
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  name1        String
  name2        String
  civilId1     String
  civilId2     String
  phone1       String
  phone2       String
  backup       Boolean    @default(false)
  groupCode    String?    // ðŸ†• Add this!

  matchesAsTeam1 Match[] @relation("Team1")
  matchesAsTeam2 Match[] @relation("Team2")
  matchesWon     Match[] @relation("Winner")

  createdAt DateTime @default(now())

  @@unique([tournamentId, civilId1, civilId2])
  @@unique([tournamentId, civilId1])
  @@unique([tournamentId, civilId2])
  @@map("teams")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Match {
  id           String  @id @default(cuid())
  tournamentId String
  round        Int // Round 1 = first, increases over time
  matchNumber  Int // Index within the round
  team1Id      String?
  team2Id      String?
  winnerId     String?

  startTime   DateTime? // Start time including date + hour
  tableNumber Int? // Table (1-32)
  groupCode   String? // e.g. "Day1-A", "Day2-B", "Finals"

  matchDate DateTime // Retained for general calendar filtering
  createdAt DateTime @default(now())

  tournament Tournament @relation(fields: [tournamentId], references: [id])
  team1      Team?      @relation("Team1", fields: [team1Id], references: [id])
  team2      Team?      @relation("Team2", fields: [team2Id], references: [id])
  winner     Team?      @relation("Winner", fields: [winnerId], references: [id])
}
